#include "stdafx.h"
#include "EP1_BehaviorManager.h"

/// AUTOGENERATED METHODS ///

int EP1_BehaviorManager::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int EP1_BehaviorManager::Release() {
	return Simulator::cStrategy::Release();
}

const char* EP1_BehaviorManager::GetName() const {
	return "Valla_CreatureOverhaul::EP1_BehaviorManager";
}

// You can extend this function to return any other types your class implements.
void* EP1_BehaviorManager::Cast(uint32_t type) const
{
	//CLASS_CAST(Simulator::cStrategy);
	CLASS_CAST(Object);
	CLASS_CAST(IWinProc);
	CLASS_CAST(EP1_BehaviorManager);
	return nullptr;
}

bool EP1_BehaviorManager::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool EP1_BehaviorManager::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute EP1_BehaviorManager::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void EP1_BehaviorManager::Initialize() {
	//WindowManager.GetMainWindow()->AddWinProc(this);
}

void EP1_BehaviorManager::Dispose() {
	
}

void EP1_BehaviorManager::Update(int deltaTime, int deltaGameTime) {
	
}

void EP1_BehaviorManager::ApplyVehicleBehaviorUIs() {
	WindowManager.GetMainWindow()->AddWinProc(this);

	auto mainwindow = WindowManager.GetMainWindow();
	auto vehicleUI = mainwindow->FindWindowByID(0x07930648);

	if (vehicleUI && vehicleUI->IsVisible()) {
		// find old UI
		auto behaviorWindowButton = vehicleUI->FindWindowByID(0x0742BD98);
		auto behaviorWindow = behaviorWindowButton->GetParent();

		// load new UI and get window
		newUIlayout.LoadByID(id("ScenarioEditModeBehaviorSection"));
		auto newWindow = newUIlayout.GetContainerWindow(); //.FindWindowByID(0x8AE7F465);

		if (newWindow && behaviorWindow) {
			// add to old UI
			WindowManager.GetMainWindow()->RemoveWindow(newWindow);
			behaviorWindow->AddWindow(newWindow);
			// adjust size and location
			newWindow->SetLocation(0, 0);
			newWindow->FitParentArea(newWindow);
		}
	}
}

void EP1_BehaviorManager::HideVehicleWeaponButton() {
	auto mainwindow = WindowManager.GetMainWindow();
	auto button = object_cast<IButton>(mainwindow->FindWindowByID(0x0C1B11A0));
	auto buttonPopout = mainwindow->FindWindowByID(0x0C1B11A1);

	if (button) {
		button->SetButtonStateFlag(4, false);
		buttonPopout->SetVisible(false);
	}
}

void EP1_BehaviorManager::ClickedVehicleWeaponButton() {
	auto mainwindow = WindowManager.GetMainWindow();
	auto button = object_cast<IButton>(mainwindow->FindWindowByID(0x0C1B11A0));
	auto buttonPopout = mainwindow->FindWindowByID(0x0C1B11A1);

	buttonPopout->SetVisible(button->GetButtonStateFlags() & 4);
}

//-------------------------------------------------------------------

int EP1_BehaviorManager::GetEventFlags() const
{
	return kEventFlagBasicInput | kEventFlagAdvanced;
}


// Ingame mouse messages
bool EP1_BehaviorManager::HandleUIMessage(IWindow* window, const Message& message)
{
	if (!(IsScenarioMode() && ScenarioMode.GetMode() == App::cScenarioMode::Mode::EditMode)) { return false; }

	//------------------------------------------------------
	// Inventory UI Buttons

	if (message.IsType(kMsgButtonClick)) {
		HideVehicleWeaponButton();
	}
	else if (message.IsType(kMsgButtonSelect)) {
		auto id = message.source->GetControlID();
		// clicking weapon button
		if (id == 0x0C1B11A0) {
			ClickedVehicleWeaponButton();
		}
		// selecting popout item
		else if (id >= 0x0C1B11A2 && id <= 0x0C1B11AF) {
			SporeDebugPrint("Selected Weapon Item");
		}
		else {
			HideVehicleWeaponButton();
		}
	}

	// Return true if the message was handled, and therefore no other window procedure should receive it.
	return false;
}