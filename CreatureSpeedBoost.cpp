#include "stdafx.h"
#include "CreatureSpeedBoost.h"

/// AUTOGENERATED METHODS ///

CreatureSpeedBoost::CreatureSpeedBoost()
{
	sInstance = this;
}

CreatureSpeedBoost::~CreatureSpeedBoost()
{
	sInstance = nullptr;
}

CreatureSpeedBoost* CreatureSpeedBoost::sInstance;

CreatureSpeedBoost* CreatureSpeedBoost::Get()
{
	return sInstance;
}

int CreatureSpeedBoost::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int CreatureSpeedBoost::Release() {
	return Simulator::cStrategy::Release();
}

// You can extend this function to return any other types your class implements.
void* CreatureSpeedBoost::Cast(uint32_t type) const
{
	CLASS_CAST(Object);
	CLASS_CAST(CreatureSpeedBoost);
	return nullptr;
}

const char* CreatureSpeedBoost::GetName() const {
	return "Valla_HorizonBlue::CreatureSpeedBoost";
}

bool CreatureSpeedBoost::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool CreatureSpeedBoost::Read(Simulator::ISerializerStream* stream)
{
	mpBoostedCreatures.clear();
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute CreatureSpeedBoost::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void CreatureSpeedBoost::Initialize() {
}

void CreatureSpeedBoost::Dispose() {
}

void CreatureSpeedBoost::Update(int deltaTime, int deltaGameTime) {
	
	if (IsCreatureGame() || IsTribeGame() || Simulator::IsSpaceGame() || (IsScenarioMode() && ScenarioMode.GetMode() == App::cScenarioMode::Mode::PlayMode)) {
		// cancel if not in hologram mode
		if (Simulator::IsSpaceGame()) {
			if (!GameNounManager.GetAvatar()) { return; }
		}

		for (auto creature : GetDataByCast<cCreatureBase>()) {
			if (creature && mpBoostedCreatures[creature->mID])
			{

				// DEBUG
				//creature->mDesiredSpeed = 20;

				// begin checking list for this creature
				// find the new speed cap and re-apply

				auto indexFind = mpBoostedCreatures.find(creature->mID);
				if (indexFind != mpBoostedCreatures.end()) {
					auto speed = indexFind.get_node()->mValue.second;
					if (creature->mDesiredSpeed > 0.05 && speed > creature->mDesiredSpeed) {
						creature->mDesiredSpeed = indexFind.get_node()->mValue.second;
					}
				}
			}
		}
	}
	
}

//-----------------------------------------------------------------------------------


void CreatureSpeedBoost::ApplySpeedBoost(cCreatureBasePtr creature, float newSpeed)
{
	//auto indexFind = mpBoostedCreatures.find(creature->mID);
	creature->mDesiredSpeed = newSpeed;
	mpBoostedCreatures[creature->mID] = newSpeed;
}

void CreatureSpeedBoost::RemoveSpeedBoost(cCreatureBasePtr creature)
{
	auto indexFind = mpBoostedCreatures.find(creature->mID);
	// if found
	if (indexFind != mpBoostedCreatures.end()) {
		// TODO: reset speed immediately instead of waiting for current movement to end
		mpBoostedCreatures.erase(indexFind);
	}
}

void CreatureSpeedBoost::RemoveAll()
{
	mpBoostedCreatures.clear();
}

//-----------------------------------------------------------------------------------

/*
bool CreatureSpeedBoost::HandleMessage(uint32_t messageID, void* msg)
{
	if (!IsTribeGame()) { return false; }

}*/